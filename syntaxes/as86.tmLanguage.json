{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "as86",
	"patterns": [
		{
			"include": "#constants"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#supports"
		},
		{
			"include": "#entities"
		},
		{
			"#include": "#variables"
		},
		{
			"#include": "#storages"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "\\s?(!.*)$",
					"captures": {
						"1": {
							"name": "comment.line"
						}
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.as86",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.as86",
					"match": "\\\\."
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.dec",
					"match": "\\b([0-9]+)\\b",
					"captures": {
						"1": {
							"name": "constant.numeric.dec"
						}
					}
				},
				{
					"name": "constant.numeric.hex",
					"match": "\\b((0x|0X)[A-F0-9a-f]+)\\b",
					"captures": {
						"1": {
							"name": "constant.numeric.hex"
						}
					}
				},
				{
					"name": "constant.numeric.bin",
					"match": "\\b([0-1]+b)\\b",
					"captures": {
						"1": {
							"name": "constant.numeric.bin"
						}
					}
				}
			]
		},
		"storages": {
			"patterns": []
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control",
					"match": "\\b(?i:if|elseif|else|endif)\\b",
					"captures": {
						"1": {
							"name": "keyword.control"
						}
					},
					"comment": "Names Pseudo Instructions case insensitive"
				},
				{
					"name": "keyword.control",
					"match": "\\b(?i:ifc|elseifc)\\b",
					"comment": "string compare(str1,str2)"
				},
				{
					"name": "keyword.operator",
					"match": "!|&|&&|\\^|\\*|\\/|\\-|\\+|~|=|<=|>=|<<|>>|<>|<|>|\\||\\|\\|\\%|\\[|\\]"
				},
				{
					"name": "keyword.operator",
					"match": "(\\b)?(?i:byte|dword|fword|far|ptr|pword|qword|tbyte|word|near)\\b"
				}
			]
		},
		"supports": {
			"patterns": [
				{
					"name": "support.class",
					"match": "(?i:\\.code|\\.data|\\.stack|\\.model|\\.end|\\.text|\\.rom|\\.bss)",
					"captures": {
						"1": {
							"name": "support.class.constant"
						}
					},
					"comment": "set current segment"
				}
			]
		},
		"entities": {
			"patterns": [
				{
					"name": "storage.type.reg",
					"match": "\\b(?i:al|ah|ax|eax|bl|bh|bx|ebx|cl|ch|cx|ecx|dl|dh|dx|edx|si|esi|di|edi|bp|ebp|sp|esp|cs|ds|ss|es|fs|gs|cr0|cr2|cr3|dr0|dr1|dr2|dr3|dr6|dr7|tr3|tr4|tr5|tr6|tr7|st)\\b",
					"captures": {
						"1": {
							"name": "storage.type.reg"
						}
					},
					"comment": "registers"
				},
				{
					"name": "entity.name.function",
					"match": "\\b(?i:calli|callf|jmpi|jmpf)\\b",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"comment": "intersegment"
				},
				{
					"name": "entity.name.function",
					"match": "\\b(?i:eseg|fseg|gseg|sseg)\\b",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"comment": "segment modifier instructions"
				},
				{
					"name": "entity.name.function",
					"match": "\\b(?i:adcb|addb|andb|cmpb|decb|divb|idivb|imulb|inb|incb|movb|mulb|negb|nootb|orb|outb|rclb|rcrb|rolb|rorb|salb|sarb|shlb|shrb|sbbb|subb|testb|xchgb|xorb)\\b",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"comment": "byte operation instructions"
				},
				{
					"name": "entity.name.function",
					"match": "\\b(?i:aaa|aad|aam|aas|adc|add|and|arpl|bound|bsf|bsr|bswap|bt|btc|btr|bts|call|cbw|cdq|clc|cld|cli|clts|cmc|cmp|cmps|cmpsb|cmpsd|cmpsw|cmpw|cmpxchg|cseg|cwd|cwde|daa|das|dec|div|dseg|enter|hlt|idiv|imul|in|inc|ins|insb|insd|insw|int|into|invd|invlpg|inw|iret|iretd|j|ja|jae|jb|jbe|jc|jcxe|jcxz|je|jecxe|jecxz|jg|jge|jl|jle|jmp|jna|jnae|jnb|jnbe|jnc|jne|jng|jnge|jnl|jnle|jno|jnp|jns|jnz|jo|jp|jpe|jpo|js|jz|lahf|lar|lds|lea|leave|les|lfs|lgdt|lgs|lidt|lldt|lmsw|lock|lodb|lods|lodsb|lodsd|lodsw|lodw|loop|loope|loopne|loopnz|loopz|lsl|lss|ltr|mov|movs|movsb|movsd|movsw|movsx|movw|movzx|mul|neg|nop|not|or|out|outs|outsb|outsd|outsw|outw|pop|popa|popad|popf|popfd|push|pusha|pushad|pushf|pushfd|rcl|rcr|rdmsr|rep|repe|repne|repnz|repz|ret|retf|reti|rol|ror|sahf|sal|sar|sbb|scab|scas|scasb|scasd|scasw|scaw|seg|seta|setae|setb|setbe|setc|sete|setg|setge|setl|setle|setna|setnae|setnb|setnbe|setnc|setne|setng|setnge|setnl|setnle|setno|setnp|setns|setnz|seto|setp|setpe|setpo|sets|setz|sgdt|shl|shld|shr|shrd|sidt|sldt|smsw|stc|std|sti|stob|stos|stosb|stosd|stosw|stow|str|sub|test|verr|verw|wait|wbinvd|wrmsr|xadd|xchg|xlat|xlatb|xor)\\b",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"comment": "standard instructions"
				},
				{
					"name": "entity.name.function",
					"match": "\\b(?i:f2xm1|fabs|fadd|faddp|fbld|fbstp|fchs|fclex|fcom|fcomp|fcompp|fcos|fdecstp|fdisi|fdiv|fdivp|fdivr|fdivrp|feni|ffree|fiadd|ficom|ficomp|fidiv|fidivr|fild|fimul|fincstp|finit|fist|fistp|fisub|fisubr|fld|fld1|fldl2e|fldl2t|fldcw|fldenv|fldlg2|fldln2|fldpi|fldz|fmul|fmulp|fnclex|fndisi|fneni|fninit|fnop|fnsave|fnstcw|fnstenv|fnstsw|fpatan|fprem|fprem1|fptan|frndint|frstor|fsave|fscale|fsetpm|fsin|fsincos|fsqrt|fst|fstcw|fstenv|fstp|fstsw|fsub|fsubp|fsubr|fsubrp|ftst|fucom|fucomp|fucompp|fwait|fxam|fxch|fxtract|fyl2x|fyl2xp1)\\b",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"comment": "floating point"
				},
				{
					"name": "entity.name.function",
					"match": "\\b(?i:bc(c|s)|beq|bg(e|t)|bhi(s?)|bl(e|o(s?)|t)|bmi|bne|bp(c|l|s)|bv(c|s)|br)\\b",
					"captures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"comment": "long branches"
				},
				{
					"name": "entity.name.function",
					"match": "\\b(?i:fail|\\.fail)\\b",
					"comment": "generate user error"
				},
				{
					"name": "markup.heading",
					"match": "(?i:\\.glob(a?)l)"
				},
				{
					"name": "entity.name.tag",
					"match": "(?i:[\\w]+)(\\:)"
				},
				{
					"name": "storage.type.data",
					"match": "(\\b)?(?i:\\.data1|\\.byte|fcb|db|dw|dd|\\.data2|\\.short|fdb|\\.word|\\.data4|\\.long|\\.ascii|fcc|\\.asciz)\\b",
					"comment": "data definition"
				},
				{
					"name": "storage.type.space",
					"match": "(\\b)?(?i:\\.blkb|rmb|\\.space|\\.blkw|\\.zerow|comm|\\.comm|lcomm|\\.lcomm)\\b",
					"comment": "space definition"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.language",
					"match": "(\\b)?(?i:\\.align|\\.even|equ|set|org|\\.org|block|endb|\\.define|export|public|loc|get|include|use16|use32|end|\\.warn|\\.list|\\.maclist|macro|mend|ident|setdp|map)\\b"
				}
			]
		}
	},
	"scopeName": "source.s"
}